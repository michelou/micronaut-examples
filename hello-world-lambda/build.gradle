plugins {
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "jp.classmethod.aws.lambda" version "0.38"
    id "groovy"
    id "application"
}

version "0.1"
group "example"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.1.0'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation "io.micronaut:micronaut-runtime-groovy"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-function-groovy"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation "com.amazonaws:aws-lambda-java-log4j2:1.2.0"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.14.0"
    runtimeOnly "io.micronaut:micronaut-inject-groovy"
    testImplementation ("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut.test:micronaut-test-spock:2.3.3"
    implementation "io.micronaut:micronaut-function-client"
    runtimeOnly "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-function-web"
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.1004'
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

mainClassName = "example.HelloWorldFunction"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

if (new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
    task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "hello-world"
        handler = "example.HelloWorldFunction::hello"
        role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
        runtime = com.amazonaws.services.lambda.model.Runtime.Java8
        zipFile = shadowJar.archivePath
        memorySize = 256
        timeout = 60
    }

}

task invoke(type: jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask) {
    functionName = "hello-world"
    invocationType = com.amazonaws.services.lambda.model.InvocationType.RequestResponse
    payload = '{"name":"Fred"}'
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}